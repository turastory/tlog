{"version":3,"file":"component---src-templates-blog-post-js-34ae1c6ae27206c7f980.js","mappings":"uJA6BA,IA1BmB,SAAC,GAA0B,IAAxBA,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WAClBC,EAASF,EAAKG,OAAdD,KACR,EAAkCF,EAAKI,YAA/BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,KACzB,OACE,0BAAQC,UAAU,eACfP,EACC,sBAAIO,UAAU,UACZ,gBAAC,EAAAC,KAAD,CAAMC,GAAIR,EAAMS,SAAS,OACvB,wBAAMA,SAAS,YAAYN,KAI/B,sBAAIG,UAAU,UACZ,wBAAMG,SAAS,YAAYN,GAAc,KAG7C,uBAAKG,UAAU,YACb,gBAAC,EAAAC,KAAD,CAAMC,GAAE,aAAeJ,EAAf,IAA4BK,SAAS,OAC3C,wBAAMA,SAAS,YAAYL,EAASM,cAApC,OAGJ,6BAAQL,M,kFC6Cd,UA9DyB,SAAC,GAAwB,IAAD,EAArBM,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1Bd,EAAOa,EAAKE,eACZC,GAAY,UAAAH,EAAKI,KAAKC,oBAAV,eAAwBb,QAAxB,QACVc,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KACZC,EAAOrB,EAAKI,YAAYiB,KAE9B,OACE,gBAAC,IAAD,CAAQP,SAAUA,EAAUT,MAAOW,GACjC,gBAAC,IAAD,CACEX,MAAOL,EAAKI,YAAYC,MACxBiB,YAAatB,EAAKI,YAAYkB,aAAetB,EAAKuB,UAEpD,2BACEf,UAAU,YACVgB,WAAS,EACTC,SAAS,6BAET,gBAAC,IAAD,CAAYzB,KAAMA,IACjBqB,EACC,uBAAKK,MAAM,OACRL,EAAKM,KAAI,SAACC,GAAD,OACR,yBAAIA,OAIR,GAEF,2BACEC,wBAAyB,CAAEC,OAAQ9B,EAAK+B,MACxCpB,SAAS,iBAGb,uBAAKH,UAAU,iBACb,sBACEwB,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGlB,GACC,gBAAC,EAAAV,KAAD,CAAMC,GAAIS,EAAShB,OAAOD,KAAMoC,IAAI,QAApC,KACKnB,EAASf,YAAYC,QAI9B,0BACGe,GACC,gBAAC,EAAAX,KAAD,CAAMC,GAAIU,EAAKjB,OAAOD,KAAMoC,IAAI,QAC7BlB,EAAKhB,YAAYC,MADpB","sources":["webpack://gatsby-starter-blog/./src/components/post-header.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst PostHeader = ({ post, isListItem }) => {\n  const { slug } = post.fields;\n  const { title, category, date } = post.frontmatter;\n  return (\n    <header className=\"post-header\">\n      {isListItem ? (\n        <h2 className=\"header\">\n          <Link to={slug} itemProp=\"url\">\n            <span itemProp=\"headline\">{title}</span>\n          </Link>\n        </h2>\n      ) : (\n        <h1 className=\"header\">\n          <span itemProp=\"headline\">{title}</span>{\" \"}\n        </h1>\n      )}\n      <div className=\"category\">\n        <Link to={`/category/${category}/`} itemProp=\"url\">\n          <span itemProp=\"category\">{category.toUpperCase()} </span>\n        </Link>\n      </div>\n      <small>{date}</small>\n    </header>\n  );\n};\n\nexport default PostHeader;\n","import * as React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport PostHeader from \"../components/post-header\";\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const { previous, next } = data;\n  const tags = post.frontmatter.tags;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <PostHeader post={post} />\n        {tags ? (\n          <div class=\"tag\">\n            {tags.map((tag) => (\n              <a>{tag}</a>\n            ))}\n          </div>\n        ) : (\n          \"\"\n        )}\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      fields {\n        slug\n      }\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY-MM-DD\")\n        description\n        category\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["post","isListItem","slug","fields","frontmatter","title","category","date","className","Link","to","itemProp","toUpperCase","data","location","markdownRemark","siteTitle","site","siteMetadata","previous","next","tags","description","excerpt","itemScope","itemType","class","map","tag","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","rel"],"sourceRoot":""}