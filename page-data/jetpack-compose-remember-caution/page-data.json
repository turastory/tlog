{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/jetpack-compose-remember-caution/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Turastory"}},"markdownRemark":{"id":"b0c9c42c-f7ce-5589-8700-9f76be6b6241","excerpt":"TL;DR Compose에서 참조로 인한 골치아픈 문제를 피하려면 가급적 method reference 보다 lambda를 사용하자. Jetpack Compose를 활용해서 UI를 만들다가, 와 method reference…","html":"<h3>TL;DR</h3>\n<p>Compose에서 참조로 인한 골치아픈 문제를 피하려면 가급적 method reference 보다 lambda를 사용하자.</p>\n<hr>\n<p>Jetpack Compose를 활용해서 UI를 만들다가, <code class=\"language-text\">remember()</code>와 method reference을 사용하면서 생긴 문제에 대해 정리해보았다.</p>\n<h2>Glossaries</h2>\n<h3><code class=\"language-text\">remember()</code></h3>\n<p><code class=\"language-text\">remember()</code>는 Compose 런타임에서 활용할 수 있는 저장 및 캐시 매커니즘으로,\n기본적으로는 저장된 값을 사용하되 키로 넘겨진 값이 변경되었을 경우 calculation block 내의 코드가 다시 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Always use the same instance (guaranteed to be retained across recomposition)</span>\n<span class=\"token keyword\">val</span> manager <span class=\"token operator\">=</span> remember <span class=\"token punctuation\">{</span> <span class=\"token function\">CoordinatesManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Use the same instance unless 'key' changed (may not be retained across recomposition)</span>\n<span class=\"token keyword\">val</span> manager <span class=\"token operator\">=</span> <span class=\"token function\">remember</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">CoordinatesManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Lambda expression</h3>\n<p>Lambda expression - 람다 표현식은 파라미터를 받아서 값을 리턴하는 코드다.</p>\n<p>함수와 무척 유사하지만, 이름이 없고 클로저로서 해당 코드 블록을 감싸고 있는 상위 영역의 환경에 접근이 가능하다. 이 환경 - environment에는 변수, 함수, 리시버 등이 포함된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> number <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// number is captured in this block</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Method reference</h3>\n<p>Method reference는 함수를 참조하는 것으로 람다와 비슷하게 함수가 필요한 곳에서 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> number <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">printNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token operator\">::</span>printNumber<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Lambda expression과 Method reference의 실제 구현상 가장 큰 차이점은 다음과 같다.</p>\n<ul>\n<li>Method reference을 사용하면, <strong>생성되는 시점</strong>의 환경을 캡처해서 사용하게 된다.</li>\n<li>Lambda expression을 사용하면, <strong>사용하는 시점</strong>의 환경을 캡처해서 사용하게 된다.</li>\n</ul>\n<p>일반적으로는 lambda 대신 method reference를 사용해도 별 문제가 없는데, <strong>코드에서 접근하는 대상(객체나 리시버)이 달라지면 이야기가 달라진다.</strong>\n다음 문단에서 좀 더 자세히 살펴보자.</p>\n<h3>Case</h3>\n<p>Compose를 사용하면서 문제가 발생한 상황은 이렇다.</p>\n<p><code class=\"language-text\">SomeLayout</code>은 UI가 화면에 그려지는 시점에, 관련된 좌표와 크기를 가져오기 위한 콜백을 받는다. 내부에서는 items를 뿌려서 보여주고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">SomeLayout</span><span class=\"token punctuation\">(</span>\n    items<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Item<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    register<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>LayoutCoordinates<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span>\n        Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">onGloballyPositioned</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Column <span class=\"token punctuation\">{</span>\n            items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span> item <span class=\"token operator\">-></span>\n                <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>뷰를 그리는 쪽은 다음과 같이 작성했다. 이 때 <code class=\"language-text\">SomeLayout</code>으로 넘겨지는 콜백에 method reference를 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">MainUi</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> MainUiState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> structureKey <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span>\n        state<span class=\"token punctuation\">.</span>items1<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>items2<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>items3\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> manager <span class=\"token operator\">=</span> <span class=\"token function\">remember</span><span class=\"token punctuation\">(</span>structureKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">CoordinatesManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>coords<span class=\"token operator\">:</span> LayoutCoordinates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        manager<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>coords<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    Columns <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">SomeLayout</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>items1<span class=\"token punctuation\">,</span> <span class=\"token operator\">::</span>register<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">SomeLayout</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>items2<span class=\"token punctuation\">,</span> <span class=\"token operator\">::</span>register<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">SomeLayout</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>items3<span class=\"token punctuation\">,</span> <span class=\"token operator\">::</span>register<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>여기서 <code class=\"language-text\">manager</code>를 가져올 때 <code class=\"language-text\">remember</code>의 키로 <code class=\"language-text\">structureKey</code>를 넘겨준 것을 확인할 수 있다.\n레이아웃 구조가 변경되면 <code class=\"language-text\">manager</code>가 들고 있는 좌표 값들을 새로 갱신해야 해서 범위를 이렇게 잡았다.</p>\n<h3>Issue</h3>\n<p>얼핏 보아서는 별로 문제가 되지 않을 것처럼 보이는 코드이지만, method reference의 특성 때문에 상태가 변경되었을 때 문제가 발생한다.</p>\n<p>기대하는 동작은, 전체적인 레이아웃의 구조가 변경되었을 때 <code class=\"language-text\">manager</code>가 다시 생성되고, 각각의 레이아웃이 다시 그려지면 새로 생성된 <code class=\"language-text\">manager</code>의 <code class=\"language-text\">register</code> 함수를 호출하는 것이다.</p>\n<p>하지만 실제로는 레이아웃이 다시 그려졌을 때 <strong>이전에 참조했던 <code class=\"language-text\">manager</code>의 <code class=\"language-text\">register</code> 함수를 호출</strong>하게 된다.\n앞서 나왔던 method reference의 특성에 따라 초기 시점의 <code class=\"language-text\">manager</code>를 캡처해서 사용하고 있는 것이다.</p>\n<h3>Resolution</h3>\n<p>그렇다면 람다를 사용하면 문제가 해결될까? <strong>그렇다.</strong> 다음과 같이 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">Columns <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">SomeLayout</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>items1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">SomeLayout</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>items2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">SomeLayout</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>items3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다른 방법은 없을까? Method reference를 사용한다면 결국 생성 시점의 환경을 캡처한다는 문제를 어떻게 핸들링하는지가 핵심이다.</p>\n<p><code class=\"language-text\">remember</code>에 키를 넘기지 않고 동일한 인스턴스를 계속 사용하면서, 갱신이 필요할 때 인스턴스를 다시 생성하는 대신 별도의 초기화를 진행하는 식으로 푸는 수밖에는 없을 것 같다.</p>\n<p>근데 그렇게 머리아프게 고민할 시간에 그냥 람다를 쓰자.. method reference를 사용했을 때 가독성이 좋은 몇몇 부분들이 있어 여러 방면으로 혼용했었는데,\nCompose를 사용할 때는 이런 문제를 피하기 위해서라도 가급적 람다를 사용해야겠다.</p>\n<h2>Reference</h2>\n<p>좀 더 디테일한 구현상 차이는 <a href=\"https://proandroiddev.com/kotlin-lambda-vs-method-reference-fdbd175f6845\">Lambda vs Method Reference</a> 포스트를 참고.</p>","frontmatter":{"title":"Jetpack Compose - remember()와 method reference 사용 시 주의점","date":"February 15, 2022","description":"Compose에서 참조로 인한 골치 아픈 문제를 피하려면 가급적 method reference 보다 lambda를 사용하자.","tags":["kotlin","android","jetpack","compose"]}},"previous":{"fields":{"slug":"/snippets/android-studio-keystore/"},"frontmatter":{"title":"Android Studio에서 keystore 생성 시 주의점"}},"next":{"fields":{"slug":"/snippets/ttf-vs-otf/"},"frontmatter":{"title":"TTF vs OTF 차이점"}}},"pageContext":{"id":"b0c9c42c-f7ce-5589-8700-9f76be6b6241","previousPostId":"ad85be87-c022-5597-8e94-838d85fb6016","nextPostId":"7f1e22ee-3f95-5b2c-a566-caedf0821cf9"}},
    "staticQueryHashes": ["2841359383"]}